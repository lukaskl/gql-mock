// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeScript Operations Map Plugin Test 1 1`] = `
Object {
  "append": Array [],
  "content": "

export type AllOutputTypes = {
  'Query': Query
  'Followable': Followable
  'Organization': Organization
  'Actor': Actor
  'Repository': Repository
  'FeedType': FeedType
  'Entry': Entry
  'User': User
  'Comment': Comment
  'Vote': Vote
  'Mutation': Mutation
  'VoteType': VoteType
  'Subscription': Subscription
}

export type AllScalarTypes = {
  'String': Scalars[\\"String\\"]
  'Int': Scalars[\\"Int\\"]
  'Date': Scalars[\\"Date\\"]
  'Float': Scalars[\\"Float\\"]
  'Boolean': Scalars[\\"Boolean\\"]
}

export interface FieldArgsUsagesMap {
  'Query': {
    feed: QueryFeedArgs,
    entry: QueryEntryArgs,
    repository: QueryRepositoryArgs
  },
  'Entry': {
    comments: EntryCommentsArgs
  },
  'Mutation': {
    submitRepository: MutationSubmitRepositoryArgs,
    vote: MutationVoteArgs,
    submitComment: MutationSubmitCommentArgs
  },
  'Subscription': {
    commentAdded: SubscriptionCommentAddedArgs
  }
}

export type TypeUsagesForCommentsPageCommentFragment = { User: CommentsPageCommentFragment['postedBy'] } &
  { Comment: CommentsPageCommentFragment }

  export type TypeUsagesForFeedEntryFragment = { Repository: FeedEntryFragment['repository'] } &
  { Actor: FeedEntryFragment['repository']['owner'] } &
  { Entry: FeedEntryFragment } &
  TypeUsagesForVoteButtonsFragment &
  TypeUsagesForRepoInfoFragment

  export type TypeUsagesForRepoInfoFragment = { Repository: RepoInfoFragment['repository'] } &
  { User: RepoInfoFragment['postedBy'] } &
  { Entry: RepoInfoFragment }

  export type TypeUsagesForVoteButtonsFragment = { Vote: VoteButtonsFragment['vote'] } &
  { Entry: VoteButtonsFragment }

  export type TypeUsagesForOnCommentAddedSubscription = { Comment: OnCommentAddedSubscription['commentAdded'] } &
  { User: NN<OnCommentAddedSubscription['commentAdded']>['postedBy'] } &
  { Subscription: OnCommentAddedSubscription }

  export type TypeUsagesForCommentQuery = { User: CommentQuery['currentUser'] } &
  { Entry: CommentQuery['entry'] } &
  { User: NN<CommentQuery['entry']>['postedBy'] } &
  { Comment: NN<CommentQuery['entry']>['comments'][0] } &
  { Comment: NN<CommentQuery['entry']>['comments2'][0] } &
  { Comment: NN<CommentQuery['entry']>['comments3'][0] } &
  { Comment: UU<NN<NN<CommentQuery['entry']>['comments3'][0]>, 'Comment'> } &
  { Repository: NN<CommentQuery['entry']>['repository'] } &
  { Repository: UU<NN<CommentQuery['entry']>['repository'], 'Repository'> } &
  { Query: CommentQuery } &
  TypeUsagesForCommentsPageCommentFragment

  export type TypeUsagesForCurrentUserForProfileQuery = { User: CurrentUserForProfileQuery['currentUser'] } &
  { Query: CurrentUserForProfileQuery }

  export type TypeUsagesForFeedQuery = { User: FeedQuery['currentUser'] } &
  { Entry: NN<FeedQuery['feed']>[0] } &
  { Query: FeedQuery } &
  TypeUsagesForFeedEntryFragment

  export type TypeUsagesForGetExtendedFollowSuggestionsQuery = { Followable: GetExtendedFollowSuggestionsQuery['followSuggestion'] } &
  { Organization: UU<NN<GetExtendedFollowSuggestionsQuery['followSuggestion']>, 'Organization'> } &
  { Repository: UU<NN<GetExtendedFollowSuggestionsQuery['followSuggestion']>, 'Repository'> } &
  { Actor: NN<UU<NN<GetExtendedFollowSuggestionsQuery['followSuggestion']>, 'Repository'>['contributors']>[0] } &
  { User: UU<NN<NN<UU<NN<GetExtendedFollowSuggestionsQuery['followSuggestion']>, 'Repository'>['contributors']>[0]>, 'User'> } &
  { Organization: UU<NN<NN<UU<NN<GetExtendedFollowSuggestionsQuery['followSuggestion']>, 'Repository'>['contributors']>[0]>, 'Organization'> } &
  { Query: GetExtendedFollowSuggestionsQuery }

  export type TypeUsagesForGetSimpleFollowSuggestionsQuery = { Followable: GetSimpleFollowSuggestionsQuery['followSuggestion'] } &
  { Organization: UU<NN<GetSimpleFollowSuggestionsQuery['followSuggestion']>, 'Organization'> } &
  { Repository: UU<NN<GetSimpleFollowSuggestionsQuery['followSuggestion']>, 'Repository'> } &
  { Query: GetSimpleFollowSuggestionsQuery }

  export type TypeUsagesForSubmitRepositoryMutation = { Entry: SubmitRepositoryMutation['submitRepository'] } &
  { Mutation: SubmitRepositoryMutation }

  export type TypeUsagesForGetRepositoryContributorsQuery = { Repository: GetRepositoryContributorsQuery['repository'] } &
  { Actor: NN<GetRepositoryContributorsQuery['repository']>['owner'] } &
  { User: UU<NN<GetRepositoryContributorsQuery['repository']>['owner'], 'User'> } &
  { Actor: NN<NN<GetRepositoryContributorsQuery['repository']>['contributors']>[0] } &
  { User: UU<NN<NN<NN<GetRepositoryContributorsQuery['repository']>['contributors']>[0]>, 'User'> } &
  { Organization: UU<NN<NN<NN<GetRepositoryContributorsQuery['repository']>['contributors']>[0]>, 'Organization'> } &
  { Query: GetRepositoryContributorsQuery }

  export type TypeUsagesForSubmitCommentMutation = { Comment: SubmitCommentMutation['submitComment'] } &
  { Mutation: SubmitCommentMutation } &
  TypeUsagesForCommentsPageCommentFragment

  export type TypeUsagesForVoteMutation = { Entry: VoteMutation['vote'] } &
  { Vote: NN<VoteMutation['vote']>['vote'] } &
  { Mutation: VoteMutation }

export interface OperationsMap {
  'CommentsPageComment': { operationType: CommentsPageCommentFragment, variablesType: {}, typeUsages: TypeUsagesForCommentsPageCommentFragment, kind: 'fragment' }
  'FeedEntry': { operationType: FeedEntryFragment, variablesType: {}, typeUsages: TypeUsagesForFeedEntryFragment, kind: 'fragment' }
  'RepoInfo': { operationType: RepoInfoFragment, variablesType: {}, typeUsages: TypeUsagesForRepoInfoFragment, kind: 'fragment' }
  'VoteButtons': { operationType: VoteButtonsFragment, variablesType: {}, typeUsages: TypeUsagesForVoteButtonsFragment, kind: 'fragment' }
  'onCommentAdded': { operationType: OnCommentAddedSubscription, variablesType: OnCommentAddedSubscriptionVariables, typeUsages: TypeUsagesForOnCommentAddedSubscription, kind: 'subscription' }
  'Comment': { operationType: CommentQuery, variablesType: CommentQueryVariables, typeUsages: TypeUsagesForCommentQuery, kind: 'query' }
  'CurrentUserForProfile': { operationType: CurrentUserForProfileQuery, variablesType: CurrentUserForProfileQueryVariables, typeUsages: TypeUsagesForCurrentUserForProfileQuery, kind: 'query' }
  'Feed': { operationType: FeedQuery, variablesType: FeedQueryVariables, typeUsages: TypeUsagesForFeedQuery, kind: 'query' }
  'getExtendedFollowSuggestions': { operationType: GetExtendedFollowSuggestionsQuery, variablesType: GetExtendedFollowSuggestionsQueryVariables, typeUsages: TypeUsagesForGetExtendedFollowSuggestionsQuery, kind: 'query' }
  'getSimpleFollowSuggestions': { operationType: GetSimpleFollowSuggestionsQuery, variablesType: GetSimpleFollowSuggestionsQueryVariables, typeUsages: TypeUsagesForGetSimpleFollowSuggestionsQuery, kind: 'query' }
  'submitRepository': { operationType: SubmitRepositoryMutation, variablesType: SubmitRepositoryMutationVariables, typeUsages: TypeUsagesForSubmitRepositoryMutation, kind: 'mutation' }
  'getRepositoryContributors': { operationType: GetRepositoryContributorsQuery, variablesType: GetRepositoryContributorsQueryVariables, typeUsages: TypeUsagesForGetRepositoryContributorsQuery, kind: 'query' }
  'submitComment': { operationType: SubmitCommentMutation, variablesType: SubmitCommentMutationVariables, typeUsages: TypeUsagesForSubmitCommentMutation, kind: 'mutation' }
  'vote': { operationType: VoteMutation, variablesType: VoteMutationVariables, typeUsages: TypeUsagesForVoteMutation, kind: 'mutation' }
}

export interface TypesMap {
  operations: OperationsMap
  fieldArgsUsages: FieldArgsUsagesMap
  allOutputTypes: AllOutputTypes
  allScalarTypes: AllScalarTypes
}

export const documentsMap = {
  'CommentsPageComment': { document: CommentsPageCommentFragmentDoc, kind: 'fragment' as const },
  'FeedEntry': { document: FeedEntryFragmentDoc, kind: 'fragment' as const },
  'RepoInfo': { document: RepoInfoFragmentDoc, kind: 'fragment' as const },
  'VoteButtons': { document: VoteButtonsFragmentDoc, kind: 'fragment' as const },
  'onCommentAdded': { document: OnCommentAddedDocument, kind: 'subscription' as const },
  'Comment': { document: CommentDocument, kind: 'query' as const },
  'CurrentUserForProfile': { document: CurrentUserForProfileDocument, kind: 'query' as const },
  'Feed': { document: FeedDocument, kind: 'query' as const },
  'getExtendedFollowSuggestions': { document: GetExtendedFollowSuggestionsDocument, kind: 'query' as const },
  'getSimpleFollowSuggestions': { document: GetSimpleFollowSuggestionsDocument, kind: 'query' as const },
  'submitRepository': { document: SubmitRepositoryDocument, kind: 'mutation' as const },
  'getRepositoryContributors': { document: GetRepositoryContributorsDocument, kind: 'query' as const },
  'submitComment': { document: SubmitCommentDocument, kind: 'mutation' as const },
  'vote': { document: VoteDocument, kind: 'mutation' as const }
}",
  "prepend": Array [
    "type NonNullable<T> = T extends null | undefined ? never : T",
    "type NN<T> = NonNullable<T>",
    "type UnwrapUnion<T, K> = T extends { __typename: K } ? T : never",
    "type UU<T, K> = UnwrapUnion<T, K>",
  ],
}
`;
